name: StudySpot Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # CODE QUALITY AND TESTING
  # ============================================
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm run install:all

    - name: Run ESLint
      run: |
        npm run lint:all

    - name: Run TypeScript check
      run: |
        npm run build:all

    - name: Run tests
      run: |
        npm run test:all

    - name: Security audit
      run: |
        npm audit --audit-level=moderate

    - name: Code coverage
      run: |
        npm run test:coverage

  # ============================================
  # BUILD AND PUSH DOCKER IMAGES
  # ============================================
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: quality-check
    strategy:
      matrix:
        service:
          - api-gateway
          - crm-service
          - communication-service
          - ml-service
          - analytics-service
          - ai-service
          - data-pipeline
          - web-owner
          - web-admin
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # ============================================
  # SECURITY SCANNING
  # ============================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    strategy:
      matrix:
        service:
          - api-gateway
          - crm-service
          - communication-service
          - ml-service
          - analytics-service
          - ai-service
          - data-pipeline
          - web-owner
          - web-admin
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ============================================
  # DEPLOY TO STAGING
  # ============================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        helm upgrade --install studyspot-staging ./kubernetes/helm/studyspot \
          --namespace studyspot-staging \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set environment=staging \
          --set ingress.host=staging.studyspot.com \
          --wait --timeout=10m

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        kubectl wait --for=condition=ready pod -l app=api-gateway -n studyspot-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=crm-service -n studyspot-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=communication-service -n studyspot-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=ml-service -n studyspot-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=analytics-service -n studyspot-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=ai-service -n studyspot-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=data-pipeline -n studyspot-staging --timeout=300s

  # ============================================
  # DEPLOY TO PRODUCTION
  # ============================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        helm upgrade --install studyspot-production ./kubernetes/helm/studyspot \
          --namespace studyspot-production \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set environment=production \
          --set ingress.host=studyspot.com \
          --set replicas.apiGateway=5 \
          --set replicas.crmService=3 \
          --set replicas.communicationService=3 \
          --set replicas.mlService=3 \
          --set replicas.analyticsService=3 \
          --set replicas.aiService=3 \
          --set replicas.dataPipeline=2 \
          --wait --timeout=15m

    - name: Run health checks
      run: |
        export KUBECONFIG=kubeconfig
        kubectl wait --for=condition=ready pod -l app=api-gateway -n studyspot-production --timeout=300s
        kubectl wait --for=condition=ready pod -l app=crm-service -n studyspot-production --timeout=300s
        kubectl wait --for=condition=ready pod -l app=communication-service -n studyspot-production --timeout=300s
        kubectl wait --for=condition=ready pod -l app=ml-service -n studyspot-production --timeout=300s
        kubectl wait --for=condition=ready pod -l app=analytics-service -n studyspot-production --timeout=300s
        kubectl wait --for=condition=ready pod -l app=ai-service -n studyspot-production --timeout=300s
        kubectl wait --for=condition=ready pod -l app=data-pipeline -n studyspot-production --timeout=300s

    - name: Run integration tests
      run: |
        export KUBECONFIG=kubeconfig
        kubectl run integration-tests --image=curlimages/curl:latest --rm -i --restart=Never -- \
          curl -f https://studyspot.com/health || exit 1

  # ============================================
  # NOTIFICATIONS
  # ============================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
    - name: Notify on success
      if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'StudySpot Enterprise Platform deployed successfully! üöÄ'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify on failure
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'StudySpot Enterprise Platform deployment failed! ‚ùå'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
