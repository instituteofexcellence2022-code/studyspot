{
  "name": "studyspot-enterprise",
  "version": "1.0.0",
  "description": "StudySpot Enterprise Platform - Complete B2B SaaS Solution for Library Management",
  "private": true,
  "workspaces": [
    "apps/*",
    "packages/*"
  ],
  "scripts": {
    "dev": "concurrently \"npm run dev:api-gateway\" \"npm run dev:crm\" \"npm run dev:communication\" \"npm run dev:ml\" \"npm run dev:web-owner\" \"npm run dev:web-admin\" \"npm run dev:mobile\"",
    "dev:api-gateway": "cd apps/api-gateway && npm run dev",
    "dev:crm": "cd apps/crm-service && npm run dev",
    "dev:communication": "cd apps/communication-service && npm run dev",
    "dev:ml": "cd apps/ml-service && npm run dev",
    "dev:web-owner": "cd web-owner && npm start",
    "dev:web-admin": "cd web-admin && npm start",
    "dev:mobile": "cd mobile && npm start",
    "build": "npm run build:api-gateway && npm run build:crm && npm run build:communication && npm run build:ml && npm run build:web-owner && npm run build:web-admin && npm run build:mobile",
    "build:api-gateway": "cd apps/api-gateway && npm run build",
    "build:crm": "cd apps/crm-service && npm run build",
    "build:communication": "cd apps/communication-service && npm run build",
    "build:ml": "cd apps/ml-service && npm run build",
    "build:web-owner": "cd web-owner && npm run build",
    "build:web-admin": "cd web-admin && npm run build",
    "build:mobile": "cd mobile && npm run build",
    "test": "npm run test:api-gateway && npm run test:crm && npm run test:communication && npm run test:ml && npm run test:web-owner && npm run test:web-admin && npm run test:mobile",
    "test:api-gateway": "cd apps/api-gateway && npm test",
    "test:crm": "cd apps/crm-service && npm test",
    "test:communication": "cd apps/communication-service && npm test",
    "test:ml": "cd apps/ml-service && npm test",
    "test:web-owner": "cd web-owner && npm test",
    "test:web-admin": "cd web-admin && npm test",
    "test:mobile": "cd mobile && npm test",
    "lint": "npm run lint:api-gateway && npm run lint:crm && npm run lint:communication && npm run lint:ml && npm run lint:web-owner && npm run lint:web-admin && npm run lint:mobile",
    "lint:api-gateway": "cd apps/api-gateway && npm run lint",
    "lint:crm": "cd apps/crm-service && npm run lint",
    "lint:communication": "cd apps/communication-service && npm run lint",
    "lint:ml": "cd apps/ml-service && npm run lint",
    "lint:web-owner": "cd web-owner && npm run lint",
    "lint:web-admin": "cd web-admin && npm run lint",
    "lint:mobile": "cd mobile && npm run lint",
    "install:all": "npm install && npm run install:api-gateway && npm run install:crm && npm run install:communication && npm run install:ml && npm run install:web-owner && npm run install:web-admin && npm run install:mobile",
    "install:api-gateway": "cd apps/api-gateway && npm install",
    "install:crm": "cd apps/crm-service && npm install",
    "install:communication": "cd apps/communication-service && npm install",
    "install:ml": "cd apps/ml-service && npm install",
    "install:web-owner": "cd web-owner && npm install",
    "install:web-admin": "cd web-admin && npm install",
    "install:mobile": "cd mobile && npm install",
    "start:all": "concurrently \"npm run start:api-gateway\" \"npm run start:crm\" \"npm run start:communication\" \"npm run start:ml\" \"npm run start:web-owner\" \"npm run start:web-admin\"",
    "start:api-gateway": "cd apps/api-gateway && npm start",
    "start:crm": "cd apps/crm-service && npm start",
    "start:communication": "cd apps/communication-service && npm start",
    "start:ml": "cd apps/ml-service && npm start",
    "start:web-owner": "cd web-owner && npm start",
    "start:web-admin": "cd web-admin && npm start",
    "docker:build": "docker-compose build",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "k8s:deploy": "kubectl apply -f kubernetes/",
    "k8s:delete": "kubectl delete -f kubernetes/",
    "terraform:init": "cd terraform && terraform init",
    "terraform:plan": "cd terraform && terraform plan",
    "terraform:apply": "cd terraform && terraform apply",
    "terraform:destroy": "cd terraform && terraform destroy",
    "ansible:deploy": "ansible-playbook -i ansible/inventory/prod.ini ansible/playbooks/deploy.yml",
    "ansible:configure": "ansible-playbook -i ansible/inventory/prod.ini ansible/playbooks/configure.yml",
    "ansible:backup": "ansible-playbook -i ansible/inventory/prod.ini ansible/playbooks/backup.yml",
    "ansible:maintenance": "ansible-playbook -i ansible/inventory/prod.ini ansible/playbooks/maintenance.yml",
    "migrate": "cd api && npm run migrate",
    "seed": "cd api && npm run seed",
    "clean": "npm run clean:node_modules && npm run clean:dist && npm run clean:logs",
    "clean:node_modules": "find . -name 'node_modules' -type d -prune -exec rm -rf '{}' +",
    "clean:dist": "find . -name 'dist' -type d -prune -exec rm -rf '{}' +",
    "clean:logs": "find . -name 'logs' -type d -prune -exec rm -rf '{}' +",
    "setup": "npm run install:all && npm run migrate && npm run seed",
    "deploy:staging": "npm run build && npm run docker:build && npm run docker:up",
    "deploy:production": "npm run build && npm run k8s:deploy",
    "monitor": "npm run monitor:logs && npm run monitor:metrics",
    "monitor:logs": "tail -f logs/*.log",
    "monitor:metrics": "curl -s http://localhost:3017/api/monitoring/metrics | jq",
    "backup": "npm run backup:database && npm run backup:files",
    "backup:database": "pg_dump $DATABASE_URL > backups/database_$(date +%Y%m%d_%H%M%S).sql",
    "backup:files": "tar -czf backups/files_$(date +%Y%m%d_%H%M%S).tar.gz uploads/ logs/",
    "restore": "npm run restore:database && npm run restore:files",
    "restore:database": "psql $DATABASE_URL < backups/database_latest.sql",
    "restore:files": "tar -xzf backups/files_latest.tar.gz",
    "security:scan": "npm audit && npm run security:scan:code",
    "security:scan:code": "npm run lint && npm run test",
    "performance:test": "npm run performance:test:api && npm run performance:test:web",
    "performance:test:api": "artillery run tests/performance/api-load-test.yml",
    "performance:test:web": "lighthouse http://localhost:3000 --output=json --output-path=reports/lighthouse-report.json",
    "docs:generate": "npm run docs:generate:api && npm run docs:generate:web",
    "docs:generate:api": "swagger-jsdoc -d swagger-config.js -o docs/api/swagger.json",
    "docs:generate:web": "typedoc --out docs/web web-owner/src web-admin/src",
    "docs:serve": "http-server docs/ -p 8080",
    "release": "npm run build && npm run test && npm run security:scan && npm run docs:generate",
    "release:patch": "npm version patch && npm run release && git push --tags",
    "release:minor": "npm version minor && npm run release && git push --tags",
    "release:major": "npm version major && npm run release && git push --tags"
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "http-server": "^14.1.1",
    "artillery": "^2.0.0",
    "lighthouse": "^11.4.0",
    "typedoc": "^0.25.4",
    "swagger-jsdoc": "^6.2.8",
    "jq": "^1.7.1"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "keywords": [
    "studyspot",
    "enterprise",
    "saas",
    "library-management",
    "microservices",
    "ai",
    "ml",
    "crm",
    "communication",
    "analytics",
    "automation"
  ],
  "author": "StudySpot Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/studyspot/enterprise.git"
  },
  "bugs": {
    "url": "https://github.com/studyspot/enterprise/issues"
  },
  "homepage": "https://studyspot.com"
}