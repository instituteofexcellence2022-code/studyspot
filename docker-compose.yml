version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: studyspot-postgres
    environment:
      POSTGRES_DB: studyspot
      POSTGRES_USER: studyspot
      POSTGRES_PASSWORD: studyspot123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/migrations:/docker-entrypoint-initdb.d
    networks:
      - studyspot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U studyspot -d studyspot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: studyspot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - studyspot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Server
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: studyspot-api
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://studyspot:studyspot123@postgres:5432/studyspot
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
    ports:
      - "3001:3001"
    volumes:
      - ./api:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - studyspot-network
    command: npm run dev

  # Web Application
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: studyspot-web
    environment:
      REACT_APP_API_URL: http://localhost:3001/api
      REACT_APP_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./web:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - studyspot-network
    command: npm start

  # Elasticsearch for search
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: studyspot-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - studyspot-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for log visualization
  kibana:
    image: kibana:8.11.0
    container_name: studyspot-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - studyspot-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: studyspot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - studyspot-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: studyspot-grafana
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - studyspot-network

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  studyspot-network:
    driver: bridge

